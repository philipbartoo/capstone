from django.db import models
from django.urls import reverse

class Csvs(models.Model):
    disaster_file=models.FileField(upload_to='disasters/')

    def __str__(self):
        return f"File: {self.id} | {self.disaster_file}"

class Disasters(models.Model):
    disaster_number = models.CharField(max_length=10,blank=True,null=True)
    state = models.CharField(max_length=35,blank=True,null=True)
    declaration_date = models.DateField(blank=True,null=True)
    disaster_due_date_for_new_apps = models.DateField(blank=True,null=True)
    disaster_period_of_performance_end_date = models.DateField(blank=True,null=True)
    number_of_projects = models.CharField(max_length=7,blank=True,null=True)
    twelve_month_lock_in_amount = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    locked_in_ceiling_amount = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    mt_project_dollars_available = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    mt_federal_share_obligated = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    mt_dollars_available = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    projected_regular_amount = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    allocated_total_amount = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    number_of_approved_projects = models.CharField(max_length=7,blank=True,null=True)
    number_of_pending_projects = models.CharField(max_length=7,blank=True,null=True)
    projected_initiative_amount = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    projected_planning_amount = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    projected_recipient_management_costs = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    available_recipient_management_costs = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    projected_subrecipient_management_costs = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    available_subrecipient_management_costs = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    available_initiative_amount = models.DecimalField(max_digits=12, decimal_places=2, blank=True,null=True)
    available_planning_amount = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    disaster_closeout_status = models.CharField(max_length=25,blank=True,null=True)
    hmgp_closeout_status = models.CharField(max_length=25,blank=True,null=True)

    def __str__(self):
        return self.state + ' | ' + self.disaster_number

class Projects(models.Model):
    assigned_disaster_number= models.ForeignKey(Disasters, blank=True,null=True,on_delete=models.CASCADE)
    
    county = models.CharField(max_length=50,blank=True,null=True)
    program_area = models.CharField(max_length=35,blank=True,null=True)
    subgrantee = models.CharField(max_length=200,blank=True,null=True)
    project_identifier = models.CharField(max_length=25,blank=True)
    application_id = models.CharField(max_length=10,blank=True,null=True)
    primary_hazard = models.CharField(max_length=50,blank=True,null=True)
    type = models.TextField(blank=True,null=True)
    project_title = models.CharField(max_length=200,blank=True,null=True)
    project_counties = models.CharField(max_length=200,blank=True,null=True)
    status = models.CharField(max_length=50,blank=True,null=True)
    environmental_document_type = models.CharField(max_length=10,blank=True,null=True)
    date_submitted = models.DateField(blank=True,null=True)
    date_received = models.DateField(blank=True,null=True)
    date_initially_approved = models.DateField(blank=True,null=True)
    date_approved = models.DateField(blank=True,null=True)
    date_closed = models.DateField(blank=True,null=True)
    subgrantee_tribal_indicator = models.BooleanField(blank=True,null=True)
    cost_share_percent = models.DecimalField(max_digits=6, decimal_places=2,blank=True,null=True)
    project_amount = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    federal_share_proposed = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    federal_share_obligated = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)
    non_federal_share = models.DecimalField(max_digits=12, decimal_places=2,blank=True,null=True)

    def __str__(self):
        return self.project_identifier + ' | ' + self.project_title

class Enrichment(models.Model):
    assigned_project_identifier = models.ForeignKey(Projects,null=True,on_delete=models.CASCADE)
    project_deliverable_number = models.CharField(max_length=6)
    project_deliverable_title = models.CharField(max_length=100)
    submitted_off_waitlist = models.BooleanField(default=False,null=True, blank=True)
    submitted_off_waitlist_date = models.DateField(blank=True,null=True)
    program_reviewer = models.CharField(max_length=100,null=True, blank=True)
    date_assigned_to_program_reviewer = models.DateField(null=True,blank=True)
    PROJECT_CATEGORY_CHOICES = [('R','Regular'),('I','Initiative'),('P','Planning'),('AA','Advanced Assistance'),('MC','Management Costs')]
    project_category = models.CharField(max_length=2, choices=PROJECT_CATEGORY_CHOICES,null=True,blank=True)
    COMPLEXITY_CHOICES = [('L','Low'),('M','Medium'),('H','High'),('E','Extreme')]
    complexity = models.CharField(max_length=1, choices=COMPLEXITY_CHOICES,null=True,blank=True)
    phased_project = models.BooleanField(default=False,null=True,blank=True)
    initial_review_complete = models.BooleanField(default=False,null=True,blank=True)
    initial_review_complete_date = models.DateField(blank=True,null=True)
    ehp_reviewer = models.CharField(max_length=100,null=True,blank=True)
    date_assigned_to_ehp_reviewer = models.DateField(null=True,blank=True)
    ehp_triage_complete = models.BooleanField(default=False,null=True,blank=True)
    ehp_triage_complete_date = models.DateField(blank=True,null=True)
    archaeological_monitoring_required = models.BooleanField(default=False,null=True,blank=True)
    clean_water_act_coordination_required = models.BooleanField(default=False,null=True,blank=True)
    tribal_monitoring_required = models.BooleanField(default=False,null=True,blank=True)
    nfms_no_effect = models.BooleanField(default=False,null=True,blank=True)
    usfws_no_effect = models.BooleanField(default=False,null=True,blank=True)
    eo_11988_90 = models.BooleanField(default=False,null=True,blank=True)
    catex = models.CharField(max_length=100,null=True,blank=True)
    esa_sec_7_notes = models.TextField(blank=True,null=True)
    nepa_level = models.CharField(max_length=300,null=True,blank=True)
    lead_federal_agency = models.CharField(max_length=300,null=True,blank=True)
    ehp_transmital_date = models.DateField(blank=True,null=True)
    ehp_application_completeness_date = models.DateField(blank=True,null=True)
    ehp_clearance_date = models.DateField(blank=True,null=True)
    ehp_kickoff_date = models.DateField(blank=True,null=True)
    ehp_transmital_date_phase_2 = models.DateField(blank=True,null=True) 
    eo_inital_public_notice_posted_date = models.DateField(blank=True,null=True)
    eo_final_public_notice_posted = models.DateField(blank=True,null=True)
    hmtap_contractor = models.CharField(max_length=300,null=True,blank=True)
    sent_to_contractor = models.DateField(blank=True,null=True)
    additional_environmental_attachments = models.BooleanField(default=False,null=True,blank=True)
    rec_complete = models.BooleanField(default=False,null=True,blank=True)
    ehp_review_complete = models.BooleanField(default=False,null=True,blank=True)
    ehp_review_complete_date = models.DateField(blank=True,null=True)
    lpn_needed = models.BooleanField(default=False,null=True,blank=True)
    lpn_available_to_obligate_date = models.DateField(blank=True,null=True)
    lpn_submitted_date = models.DateField(blank=True,null=True)
    spend_plan_date = models.DateField(blank=True,null=True)
    hma_review_complete = models.BooleanField(default=False,null=True,blank=True)
    hma_review_complete_date = models.DateField(blank=True,null=True)
    actual_project_completion_date = models.DateField(blank=True,null=True)
    award_letter_activity_complete_date = models.DateField(blank=True,null=True)
    anticipated_activity_completion_date = models.DateField(blank=True,null=True)
    plan_expiration_date = models.DateField(blank=True,null=True)
    mitigation_coorespondence_complete = models.BooleanField(default=False,null=True,blank=True)
    award_complete = models.BooleanField(default=False,null=True,blank=True)
    award_complete_date = models.DateField(blank=True,null=True)
    actual_activity_completion_date = models.DateField(blank=True,null=True)
    site_visit_date = models.DateField(blank=True,null=True)
    closeout_submission_date = models.DateField(blank=True,null=True)
    non_compliance_memo = models.BooleanField(default=False,null=True,blank=True)
    financial_specialist_final_review = models.BooleanField(default=False,null=True,blank=True)
    deobligation_required = models.BooleanField(default=False,null=True,blank=True)
    amount_deobligated = models.DecimalField(max_digits=12, decimal_places=2,null=True,blank=True)
    ehp_final_review_complete = models.BooleanField(default=False,null=True,blank=True)
    ehp_final_review_date = models.DateField(blank=True,null=True)
    program_final_review_complete = models.BooleanField(default=False,null=True,blank=True)
    program_final_review_date = models.DateField(blank=True,null=True)
    closeout_complete = models.BooleanField(default=False,null=True,blank=True)
    closeout_complete_date = models.DateField(blank=True,null=True)
    rfi_required = models.BooleanField(default=False,null=True,blank=True)
    awaiting_rfi_response = models.BooleanField(default=False,null=True,blank=True)
    rfi_sent_date = models.DateField(blank=True,null=True)
    comments = models.TextField(blank=True,null=True)

    def __str__(self):
        return self
    
    def get_absolute_url(self):
        return reverse('home')